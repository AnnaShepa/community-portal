version: 1
jobs:
  build_frontend:
    working_directory: ~/community-portal/frontend

    docker:
      - image: circleci/node:10.3

    steps:
      - checkout:
          path: ~/community-portal/

      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "./package.json" }}
            - dependencies-cache

      - attach_workspace:
          at: ~/community-portal/functions/workspace

      - run:
          name: Install dependencies
          command: npm install

      - run:
          name: Run frontend tests
          command: npm test

      - save_cache:
          paths:
            - node_modules
          key: dependencies-cache-{{ checksum "./package.json" }}

      # Install AWS cli
      - run:
          name: Install aws cli
          command:
              sudo apt-get -y -qq install awscli

      - run:
          name: deploy application
          command: |
            endpoint=$(cat ../functions/workspace/endpoint)
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              STAGE=qa npm run build:webpack
              aws s3 sync public/. s3://staging.opensource.engcom.magento.com --acl public-read --delete
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              STAGE=production npm run build:webpack
              aws s3 sync public/. s3://production.opensource.magento.com --acl public-read --delete
            elif [ "${CIRCLE_BRANCH}" == "sprint-dev" ]; then
              STAGE=dev npm run build:webpack
              aws s3 sync public/. s3://dev.opensource.engcom.magento.com --acl public-read --delete  
            else
              STAGE=custom ENDPOINT_URL="$endpoint" FRONTEND="http://dev.opensource.engcom.magento.com.s3-website-us-east-1.amazonaws.com/$endpoint" npm run build:webpack
              aws s3 sync public/. s3://dev.opensource.engcom.magento.com/$endpoint --delete
            fi

  build_functions:
    working_directory: ~/community-portal/functions

    docker:
      - image: circleci/node:10.3

    steps:
      - checkout:
          path: ~/community-portal/

      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "./package.json" }}
            - dependencies-cache
      
      - run: mkdir -p workspace  

      - run:
          name: Install dependencies
          command: npm install

      - run:
          name: Install Java
          command: 'sudo apt-get update && sudo apt-get install default-jre default-jdk'

      - run:
          name: Install Python dev static libraries
          command: sudo apt-get install python-dev

      - run:
          name: Install pip
          command: 'curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python get-pip.py --user'

      - run:
          name: Install aws cli
          command: ~/.local/bin/pip install awscli --upgrade --user

      - run:
          name: Setup Local DynamoDB
          command: node_modules/.bin/sls dynamodb install

      - run:
          name: Start Local DynamoDB
          command: node_modules/.bin/sls offline start --stage=dev -r us-east-1
          background: true

      - run: sleep 60

      - run:
          name: Insert user fixture data for Mae
          command: ~/.local/bin/aws dynamodb put-item --table-name users-dev --item file://tests/dynamodb/fixtures/users/mae.json --endpoint-url http://localhost:8000 --region us-east-1

      - run:
          name: Insert user fixture data for Xiya
          command: ~/.local/bin/aws dynamodb put-item --table-name users-dev --item file://tests/dynamodb/fixtures/users/xiya.json --endpoint-url http://localhost:8000 --region us-east-1

      - run:
          name: Run backend tests
          command: npm test

      - run:
          name: Deploy application
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              node_modules/.bin/sls create_domain --stage staging
              node_modules/.bin/sls deploy --stage staging
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              node_modules/.bin/sls create_domain --stage prod
              node_modules/.bin/sls deploy --stage prod
            elif [ "${CIRCLE_BRANCH}" == "sprint-dev" ]; then
              node_modules/.bin/sls create_domain --stage dev
              node_modules/.bin/sls deploy --stage dev   
            else
              node_modules/.bin/sls create_domain --stage "${CIRCLE_BRANCH}"
              node_modules/.bin/sls deploy --stage "${CIRCLE_BRANCH}"
            fi

      - run:
          name: Set endpoint variable for S3 deployment
          command: node_modules/.bin/sls info --verbose | grep ServiceEndpoint | sed -E s/ServiceEndpoint\:[[:space:]]//g > workspace/endpoint

      - persist_to_workspace:
          root: workspace
          paths:
            - endpoint

      - save_cache:
          paths:
            - node_modules
          key: dependencies-cache-{{ checksum "./package.json" }}

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_functions
      - build_frontend:
          requires:
            - build_functions

 
