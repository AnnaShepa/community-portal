custom:
  jwt:
    secret: ${env:JWT_SECRET}
    expiration_time: 20d
  github:
    user_token: ${env:GITHUB_USER_TOKEN}
    dev:
      github_client_id: ${env:DEV_GITHUB_CLIENT_ID}
      github_client_secret: ${env:DEV_GITHUB_CLIENT_SECRET}
    staging:
      github_client_id: ${env:STAGING_GITHUB_CLIENT_ID}
      github_client_secret: ${env:STAGING_GITHUB_CLIENT_SECRET}
    production:
      github_client_id: ${env:GITHUB_CLIENT_ID}
      github_client_secret: ${env:GITHUB_CLIENT_SECRET}
    client_id: ${self:custom.github.${opt:stage, 'dev'}.github_client_id} # github auth app client_id
    client_secret: ${self:custom.github.${opt:stage, 'dev'}.github_client_secret} # github auth app client_secret
  dynamodb:
    start:
      migrate: true
  functions:
    # Add lambda functions for public endpoints here so Jest will not complain
    public:
      - authorization
      - getProjectCards
      - getProjectDetails
      - getUserInfo
  domainNames:
    dev:
      name: dev.api.opensource.engcom.magento.com
      path: ${opt:branch, ''}
      stage: ${opt:stage, ''}
    staging:
      name: api.opensource.engcom.magento.com
      path: ${opt:branch, ''}
      stage: ${opt:stage, ''}
    production:
      name: api.opensource.magento.com
      path: ${opt:branch, ''}
      stage: ${opt:stage, ''}
  customDomain:
   domainName: ${self:custom.domainNames.${opt:stage, 'dev'}.name}
   basePath: ${self:custom.domainNames.${opt:stage, 'dev'}.path} # If created by CircleCI prefix will correspond to the branch code is pushed to
   stage: ${self:provider.stage} # Stage will be created for every branch
   createRoute53Record: false

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.domainNames.${opt:stage, 'dev'}.stage, 'dev'}
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    PARTNER_TEAMS_TABLE: ${file(./schema.json):PartnerTeams.Properties.TableName}
    PARTNER_TEAMS_INDEX: ${file(./schema.json):PartnerTeamMembers.Properties.TableName}-index
    PARTNER_TEAM_MEMBERS_TABLE: ${file(./schema.json):PartnerTeamMembers.Properties.TableName}
    PARTNER_TEAM_MEMBERS_INDEX: ${file(./schema.json):PartnerTeamMembers.Properties.TableName}-index
    PARTNER_TEAM_OWNERS_TABLE: ${file(./schema.json):PartnerTeamOwners.Properties.TableName}
    PARTNER_TEAM_OWNERS_INDEX: ${file(./schema.json):PartnerTeamOwners.Properties.TableName}-index
    GITHUB_PARTNER_TEAMS_TABLE: ${file(./schema.json):GithubPartnerTeams.Properties.TableName}
    GITHUB_PARTNER_TEAMS_INDEX: ${file(./schema.json):GithubPartnerTeams.Properties.TableName}-index
    GITHUB_USERS_TABLE: ${file(./schema.json):GithubUsers.Properties.TableName}
    GITHUB_USERS_INDEX: ${file(./schema.json):GithubUsers.Properties.TableName}-index
    TEAMS_TO_USERS_INDEX: ${file(./schema.json):TeamsToUsersIndex.Properties.TableName}
    PROJECTS_TO_INDEX_STARS_TABLE: ${file(./schema.json):ProjectsToIndexStars.Properties.TableName}
    PROJECTS_TO_INDEX_STARS_PROJECT_NAME_INDEX: ${file(./schema.json):ProjectsToIndexStars.Properties.TableName}-project-name-index
    PROJECTS_STARS_TABLE: ${file(./schema.json):ProjectStars.Properties.TableName}
    PROJECTS_STARS_USER_ID_INDEX: ${file(./schema.json):ProjectStars.Properties.TableName}-user-id-index
    PROJECTS_STARS_PROJECT_NAME_INDEX: ${file(./schema.json):ProjectStars.Properties.TableName}-project-name-index
    PROJECTS_STARS_USER_NAME_INDEX: ${file(./schema.json):ProjectStars.Properties.TableName}-user-name-index
    PROJECTS_TABLE: ${file(./schema.json):Projects.Properties.TableName}
    PROJECTS_INDEX: ${file(./schema.json):Projects.Properties.TableName}-index
    PROJECTS_GITHUB_ID_INDEX: ${file(./schema.json):Projects.Properties.TableName}-github-id-index
    USERS_TABLE: ${file(./schema.json):Users.Properties.TableName}
    USERS_INDEX: ${file(./schema.json):Users.Properties.TableName}-index
    USERS_LOGIN_INDEX: ${file(./schema.json):Users.Properties.TableName}-login-index
    TAGS_TABLE: ${file(./schema.json):Tags.Properties.TableName}
    SKILLS_TABLE: ${file(./schema.json):Skills.Properties.TableName}
    PULL_REQUESTS_TABLE: ${file(./schema.json):PullRequests.Properties.TableName}
    PULL_REQUESTS_INDEX: ${file(./schema.json):PullRequests.Properties.TableName}-index
    EPICS_TABLE: ${file(./schema.json):Epics.Properties.TableName}
    EPICS_INDEX: ${file(./schema.json):Epics.Properties.TableName}-index
    ISSUES_TABLE: ${file(./schema.json):Issues.Properties.TableName}
    ISSUES_INDEX: ${file(./schema.json):Issues.Properties.TableName}-index
    JWT_SECRET: ${self:custom.jwt.secret}
    JWT_EXPIRATION_TIME: ${self:custom.jwt.expiration_time}
    BASE_PATH: ${self:custom.domainNames.${opt:stage, 'dev'}.path}
    GITHUB_CLIENT_ID: ${self:custom.github.client_id}
    GITHUB_CLIENT_SECRET: ${self:custom.github.client_secret}
    GITHUB_USER_TOKEN: ${self:custom.github.user_token}
  iamRoleStatements:
      - Effect: Allow
        Action:
          - logs:*
        Resource:
          - 'Fn::Join':
            - ':'
            -
              - 'arn:aws:logs'
              - '*'
              - '*'
              - '*'
      - Effect: Allow
        Action:
          - cloudwatch:*
          - logs:*
        Resource:
          - '*'
package:
  individually: false
  exclude:
    - coverage/**
    - .circleci/**

service: community-portal

functions:
  - ${file(./handlers/authorizer/authorizer.yml)}
  - ${file(./handlers/authorization/authorization.yml)}
  - ${file(./handlers/indexer/projectStars/projectStars.yml)}
  - ${file(./handlers/partners/saveTeam/saveTeam.yml)}
  - ${file(./handlers/partners/getTeams/getTeams.yml)}
  - ${file(./handlers/partners/getTeam/getTeam.yml)}
  - ${file(./handlers/partners/verifyUser/verifyUser.yml)}
  - ${file(./handlers/partners/editTeam/editTeam.yml)}
  - ${file(./handlers/githubUsersIndexer/githubUsersIndexer.yml)}
  - ${file(./handlers/githubPartnerTeamsIndexer/githubPartnerTeamsIndexer.yml)}
  - ${file(./handlers/project/createProject/createProject.yml)}
  - ${file(./handlers/project/getProjectCards/getProjectCards.yml)}
  - ${file(./handlers/project/getProjectDetails/getProjectDetails.yml)}
  - ${file(./handlers/project/editProject/editProject.yml)}
  - ${file(./handlers/project/updateProjectStatus/updateProjectStatus.yml)}
  - ${file(./handlers/user/likeProject/likeProject.yml)}
  - ${file(./handlers/user/bookmarkProject/bookmarkProject.yml)}
  - ${file(./handlers/user/getLikedProjects/getLikedProjects.yml)}
  - ${file(./handlers/user/getBookmarkedProjects/getBookmarkedProjects.yml)}
  - ${file(./handlers/user/pledge/pledge.yml)}
  - ${file(./handlers/user/getUserInfo/getUserInfo.yml)}

resources:
  Resources:
    # Allow CORS headers for custom authorizer
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
        ResponseTemplates:
          application/json: "{\"error\": $context.error.messageString}"
    # Add references to defined tables and roles here before deployment
    ProjectsTable: ${file(./schema.json):Projects}
    TeamsToUsersIndexTable: ${file(./schema.json):TeamsToUsersIndex}
    GithubPartnerTeamsTable: ${file(./schema.json):GithubPartnerTeams}
    GithubUsersTable: ${file(./schema.json):GithubUsers}
    PartnerTeamsTable: ${file(./schema.json):PartnerTeams}
    PartnerTeamMembers: ${file(./schema.json):PartnerTeamMembers}
    PartnerTeamOwners: ${file(./schema.json):PartnerTeamOwners}
    UsersTable: ${file(./schema.json):Users}
    TagsTable: ${file(./schema.json):Tags}
    SkillsTable: ${file(./schema.json):Skills}
    PullRequestsTable: ${file(./schema.json):PullRequests}
    EpicsTable: ${file(./schema.json):Epics}
    IssuesTable: ${file(./schema.json):Issues}
    ProjectsToIndexStarsTable: ${file(./schema.json):ProjectsToIndexStars}
    ProjectStarsTable: ${file(./schema.json):ProjectStars}
    projectStarsRole: ${file(./handlers/indexer/projectStars/role.yml):projectStarsRole}
    saveTeamRole: ${file(./handlers/partners/saveTeam/role.yml):saveTeamRole}
    getTeamsRole: ${file(./handlers/partners/getTeams/role.yml):getTeamsRole}
    getTeamRole: ${file(./handlers/partners/getTeam/role.yml):getTeamRole}
    verifyUserRole: ${file(./handlers/partners/verifyUser/role.yml):verifyUserRole}
    editTeamRole: ${file(./handlers/partners/editTeam/role.yml):editTeamRole}
    githubUsersIndexerRole: ${file(./handlers/githubUsersIndexer/role.yml):githubUsersIndexerRole}
    githubPartnerTeamsIndexerRole: ${file(./handlers/githubPartnerTeamsIndexer/role.yml):githubPartnerTeamsIndexerRole}
    createProjectRole: ${file(./handlers/project/createProject/role.yml):createProjectRole}
    getProjectCardsRole: ${file(./handlers/project/getProjectCards/role.yml):getProjectCardsRole}
    getProjectDetailsRole: ${file(./handlers/project/getProjectDetails/role.yml):getProjectDetailsRole}
    editProjectRole: ${file(./handlers/project/editProject/role.yml):editProjectRole}
    updateProjectStatusRole: ${file(./handlers/project/updateProjectStatus/role.yml):updateProjectStatusRole}
    likeProjectRole: ${file(./handlers/user/likeProject/role.yml):likeProjectRole}
    bookmarkProjectRole: ${file(./handlers/user/bookmarkProject/role.yml):bookmarkProjectRole}
    getLikedProjectsRole: ${file(./handlers/user/getLikedProjects/role.yml):getLikedProjectsRole}
    getBookmarkedProjectsRole: ${file(./handlers/user/getBookmarkedProjects/role.yml):getBookmarkedProjectsRole}
    pledgeRole: ${file(./handlers/user/pledge/role.yml):pledgeRole}
    getUserInfoRole: ${file(./handlers/user/getUserInfo/role.yml):getUserInfoRole}
    authorizationRole: ${file(./handlers/authorization/role.yml):authorizationRole}

plugins:
  - serverless-domain-manager
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline # serverless-offline needs to be last in the list
